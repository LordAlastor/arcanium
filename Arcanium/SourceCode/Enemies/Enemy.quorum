use Libraries.Containers.Array
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.System.File

class Enemy is Combatant

    Array<Attack> usableAttacks    //array of attacks that the enemy can use

    action SetStats(text newName, integer newCurrentHP, integer newMaxHP, 
     integer newExperienceValue, integer newLevel, number newCurrentAttack, 
     Array<number> newCurrentElementsEffectiveness)
        SetName(newName)
        SetCurrentHP(newCurrentHP)
        SetMaxHP(newMaxHP)
        SetExperienceValue(newExperienceValue)
        SetLevel(newLevel)
        SetCurrentAttack(newCurrentAttack)
        integer i = 0
        repeat while (i < 6)
            SetCurrentElementsEffectivenessAtPosition(i,
             newCurrentElementsEffectiveness:Get(i))
            i = i + 1
        end
    end

    /*Parse through the JSON to find an enemy with the given name and 
    use that information to fill out the enemy's fields*/    
    action FillEnemy(text name)
        SetName(name)
        JavaScriptObjectNotation enemies
        File enemiesList
        enemiesList:SetPath("Assets\EnemyTypes\Enemies.json")
        enemies:Read(enemiesList)
        JavaScriptObjectNotation enemyData = enemies:GetObject("enemies")

        JavaScriptObjectNotation currentEnemy
        integer i = 0
        boolean found = false
        repeat while (i < enemyData:GetSize() and not found)
            currentEnemy = enemyData:Get(i)
            if (currentEnemy:GetValue("name") = GetName())
                found = true
            else
                i = i + 1
            end
        end

        if (not found)
            output "Temporary Error: enemy not found"
        else
            SetCurrentHP(currentEnemy:GetValue("currentHP"):ParseInteger())
            SetMaxHP(currentEnemy:GetValue("maxHP"):ParseInteger())
            SetExperienceValue(currentEnemy:GetValue("experienceValue"):ParseInteger())
            SetLevel(currentEnemy:GetValue("level"):ParseInteger())
            SetCurrentAttack(currentEnemy:GetValue("currentAttack"):ParseNumber())

            enemyData = currentEnemy:GetObject("currentElementsEffectiveness")
            i = 0
            repeat while (i < enemyData:GetSize())
                SetCurrentElementsEffectivenessAtPosition(i, 
                 enemyData:Get(i):GetValue():ParseNumber())
                i = i + 1
            end

            enemyData = currentEnemy:GetObject("usableAttacks")
            i = 0
            integer attackID = 0
            repeat while (i < enemyData:GetSize())
                attackID = enemyData:Get(i):GetValue():ParseInteger()
                if (attackID / 1000000 = 9)
                    Spell currentSpell
                    currentSpell:FillSpell(attackID)
                    usableAttacks:Add(currentSpell)
                else
                    Physical currentPhysical
                    currentPhysical:FillPhysical(attackID)
                    usableAttacks:Add(currentPhysical)
                end
                i = i + 1
            end
        end
    end

    action AI
    end

/*******************************************************************************
                    Getters and Setters Below This Point
*******************************************************************************/

    action AddToUsableAttacks(Attack newUsableAttack)
        usableAttacks:Add(newUsableAttack)
    end

    action SetUsableAttacksAtPosition(integer position, Attack newUsableAttack)
        usableAttacks:Set(position, newUsableAttack)
    end

    action GetUsableAttacksAtPosition(integer position) returns Attack
        return usableAttacks:Get(position)
    end
end