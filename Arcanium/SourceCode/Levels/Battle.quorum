use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.TextBox
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Label
use Libraries.Compute.Math
use Libraries.Interface.Item2D
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.InputMonitor
use Libraries.Interface.Behaviors.Behavior

class Battle is Level
    
    BehaviorQueue behaviorQueue = undefined
    Array<Item2D> removalArray = undefined
    Behavior previousBehavior
    Array<Item2D> currentPage
    Array<Combatant> combatants
    Array<Label> statusInfo
    Array<Drawable> statusWindows
    Array<Drawable> sprites
    Array<text> log
    Drawable background
    Game game
    Color color
    Label playerMana
    
    on create
        //background:Load("Assets\Maps\Battle.png")
    end

    action SetGame(Game newGame)
        game = newGame
    end

    action SetRemovalArray(Array<Item2D> newArray)
        removalArray = newArray
    end

    action Initialize(Player player, Array<text> enemyTeam)

        player:SetBattle(me)

        combatants:Add(player)

        //placeholder for player sprite, just loads a square instead for now
        Drawable playerSquare
        playerSquare:LoadFilledRectangle(150, 150, color:Blue())
        playerSquare:SetPosition(50, 200)
        game:Add(playerSquare)
        sprites:Add(playerSquare)

        //displays player health and mana
        Drawable playerHealthBackground
        playerHealthBackground:LoadFilledRectangle(120, 40, color:LightGray())
        playerHealthBackground:SetPosition(225, 300)
        game:Add(playerHealthBackground)
        statusWindows:Add(playerHealthBackground)

        Label playerHealth
        playerHealth:SetText("Health: " + player:GetCurrentHP() + "/" + player:GetMaxHP())
        playerHealth:SetPosition(230, 325)
        game:Add(playerHealth)
        statusInfo:Add(playerHealth)

        playerMana:SetText("Mana: " + player:GetCurrentMP() + "/" + player:GetMaxMP())
        playerMana:SetPosition(230, 305)
        game:Add(playerMana)

        integer counter = 0

        repeat while counter < enemyTeam:GetSize()
            if counter >= 3
                counter = enemyTeam:GetSize()
                output "Warning: only 3 enemies allowed per battle, extra enemies ignored."
            else
                Enemy enemy
                enemy:FillEnemy(enemyTeam:Get(counter))
                enemy:SetGame(game)
                enemy:SetBattle(me)
                enemy:SetRemovalArray(removalArray)
                enemy:SetBehaviorQueue(behaviorQueue)
                combatants:Add(enemy)

                counter = counter + 1
            end
        end
        
        integer combatantIndex = 1
        Math math

        repeat while combatantIndex < combatants:GetSize()
            Drawable enemySprite
            enemySprite:LoadFilledCircle(50, color:Red())
            enemySprite:SetPosition(400 + 120 * (combatantIndex - 1), 400 + 50 * ((combatantIndex - 1) mod 2))
            game:Add(enemySprite)
            sprites:Add(enemySprite)

            Drawable enemyHealthBackground
            enemyHealthBackground:LoadFilledRectangle(120, 30, color:LightGray())
            enemyHealthBackground:SetPosition(225, 500 - 40 * (combatantIndex - 1))
            game:Add(enemyHealthBackground)
            statusWindows:Add(enemyHealthBackground)

            Label enemyHealth
            enemyHealth:SetText("Health: " + combatants:Get(combatantIndex):GetCurrentHP() + "/" + combatants:Get(combatantIndex):GetMaxHP())
            enemyHealth:SetPosition(230, 500 + 15 - 40 * (combatantIndex - 1))
            game:Add(enemyHealth)
            statusInfo:Add(enemyHealth)

            combatantIndex = combatantIndex + 1
        end

        counter = 1

        text enemiesLog = "An enemy "
        repeat while counter < combatants:GetSize()
            if counter = combatants:GetSize() - 1
                enemiesLog = enemiesLog + "and " + combatants:Get(counter):GetName() + " attacked!"
            else
                enemiesLog = enemiesLog + combatants:Get(counter):GetName() + ", "
            end

            counter = counter + 1
        end
        log:Add(enemiesLog)

        Drawable dialogueBackground
        dialogueBackground:LoadFilledRectangle(800, 180, color:LightGray())
        game:Add(dialogueBackground)

        DisplayLogBehavior logBehavior
        logBehavior:SetGame(game)
        logBehavior:SetLog(log)
        logBehavior:SetRemovalArray(removalArray)
        behaviorQueue:AddBehavior(logBehavior)

        PlayerTurn()
    end

    action UpdateStatus
        CombatUpdateStatusBehavior behavior
        behavior:SetGame(game)
        behavior:SetRemovalArray(removalArray)
        behavior:SetCombatants(combatants)
        behavior:SetPlayerMana(playerMana)
        behavior:SetStatusInfo(statusInfo)
        behavior:SetStatusWindows(statusWindows)
        behavior:SetSprites(sprites)
        behaviorQueue:AddBehavior(behavior)
    end

    action PlayerTurn
        CombatMainPageBehavior behavior
        behavior:SetGame(game)
        behavior:SetBehaviorQueue(behaviorQueue)
        behavior:SetRemovalArray(removalArray)
        behavior:SetBattle(me)
        behavior:SetMaxTokens(2)
        behavior:SetCombatants(combatants)
        behavior:SetSprites(sprites)
        behaviorQueue:AddBehavior(behavior)
    end

    action EnemyTurn
        CombatEnemyTurnBehavior behavior
        behavior:SetGame(game)
        behavior:SetRemovalArray(removalArray)
        behavior:SetBattle(me)
        behavior:SetCombatants(combatants)
        behavior:SetBehaviorQueue(behaviorQueue)
        behaviorQueue:AddBehavior(behavior)
    end

    action GetCombatants returns Array<Combatant>
        return combatants
    end

    action GetSprites returns Array<Drawable>
        return sprites
    end

    action GetPlayer returns Combatant
        return combatants:Get(0)
    end

    action SetBehaviorQueue(BehaviorQueue queue)
        behaviorQueue = queue
    end

    action SetCurrentPage(Array<Item2D> array)
        currentPage = array
    end

    action SetPreviousBehavior(Behavior behavior)
        previousBehavior = behavior
    end

    action GetPreviousBehavior returns Behavior
        return previousBehavior
    end

    action GetCurrentPage returns Array<Item2D>
        return currentPage
    end

end