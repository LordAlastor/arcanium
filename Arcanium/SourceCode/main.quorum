use Libraries.Game.Game
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.InputMonitor
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Controls.Button
use Libraries.Interface.Layouts.Layout
use Libraries.System.Console
use Libraries.Interface.Behaviors.Behavior
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.ImageSheet

class Main is Game, CollisionListener2D
    
    //Queues for removing objects
    BehaviorQueue behaviorQueue
    Array<Item2D> removalQueue

    //Entities
    Map map1
    Player player1

    //For drawing images
    Drawable testmap
    Drawable player
    Drawable box
    Color color   

    //For player movement
    number newX = 0
    number newY = 0
    number plyrSpeed = 100
    KeyboardEvent keys
    InputMonitor monitor

    //Map Names
    //TO-DO: Export this in the future to a file that we can directly reference in this file
    text TEST_MAP = "Testmap"
    text FOREST_MAP = "Forest"
    text CASTLE_MAP = "Castle"
 
    //For animations
    Animation testAnimation
    number elapsedTime = 0
    number fps = 4
    number frame = 1
    

    action Main

        StartGame()
    end

    action CreateGame

        /***********************************************************************
        Setup for loading a Battle (test version for now, will be adapted to
        the generalized loading a Level setup in the future.

        NOTE: For now, if working within the main class, just comment out this
        section of code to avoid my stuff screwing yours up.

                                                            - Matt
        ***********************************************************************/

//        Player player   //placeholder for now
//        
//        Battle battle
//        Slime sampleSlime
//        battle:SetGame(me)
//        battle:LoadLevel()
//        battle:Initialize(player, sampleSlime)

        /***********************************************************************
        End of Matt's Testing Section
        ***********************************************************************/

        //Allows for collisions
        EnablePhysics2D(true)
        
        map1:loadMap(TEST_MAP)
        map1:loadCollisionLayer(TEST_MAP)
        
        // test if map uploads
        /*map1:loadMap(CASTLE_MAP)
        map1:loadCollisionLayer(CASTLE_MAP)*/

        player1:DrawPlayer()

        //Add the drawables to the default layer
        Add(map1:testMap) 

        //Render all of the collision objects
        i = 0
        repeat map1:collisions:GetSize() times
            Add(map1:collisions:Get(i))
            i = i + 1
        end

        Add(player1:playerSprite)

        //Makes the player collidable and responsive to collisions
        player1:playerSprite:EnablePhysics(true)
        player1:playerSprite:SetResponsive()
        
        AddCollisionListener(me)

        //For animations
        testAnimation:LoadImageSheet()
        testAnimation:LoadFrame()
        Add(testAnimation:girl)
        
    end

    action Update(number seconds)
        //Necessary for removing unneeded objects
        behaviorQueue:Update(seconds)
        repeat until removalQueue:IsEmpty()
            Remove(removalQueue:RemoveFromFront())
        end
       
        //for animation
        //elapsedTime = elapsedTime + seconds

        //Movement using WASD
        if monitor:IsKeyPressed(keys:W)
            newY = player1:playerSprite:GetY() + plyrSpeed * seconds
            
            // for animation -- commented out for testing
            /*newY = testAnimation:girl:GetY() + plyrSpeed * seconds
            //for animation
            if elapsedTime >= 1/fps
                frame = frame + 1
            if frame > 3
                frame = 1 
            end
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end*/

        elseif monitor:IsKeyPressed(keys:S)
            newY = player1:playerSprite:GetY() - plyrSpeed * seconds

        elseif monitor:IsKeyPressed(keys:D)
            newX = player1:playerSprite:GetX() + plyrSpeed * seconds

        elseif monitor:IsKeyPressed(keys:A)
            newX = player1:playerSprite:GetX() - plyrSpeed * seconds
        end
        
        player1:playerSprite:SetPosition(newX,newY)
        //testAnimation:girl:SetPosition(newX, newY)



    end

    action AddBehavior(Behavior behavior)
        behaviorQueue:AddBehavior(behavior)
    end

    action AddToRemove(Item2D item)
        removalQueue:Add(item)
    end

    action BeginCollision(CollisionEvent2D event)
        output "OW!"
    end
end
