use Libraries.Game.Game
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.InputMonitor
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Controls.Button
use Libraries.Interface.Layouts.Layout
use Libraries.System.Console
use Libraries.Interface.Behaviors.Behavior
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.ImageSheet
use Libraries.Game.Graphics.Camera      // Adds Camera

class Main is Game, CollisionListener2D
    
    //Queue for storing subsequent Behaviors
    BehaviorQueue behaviorQueue

    //Queue for removing objects
    Array<Item2D> removalArray

    //Entities
    Map map1
    Player player1
	
    // For Interaction testing      -Ryan
    Array<Interactable> npcList
    Camera camera = undefined  // Camera

    //For drawing images
    Drawable testmap
    Drawable player
    Drawable box
    Color color   

    //For player movement
    number newX = 0
    number newY = 0
    number plyrSpeed = 100
    KeyboardEvent keys
    InputMonitor monitor

    //Map Names
    //TO-DO: Export this in the future to a file that we can directly reference in this file
    MapList maps
 
    //For animations
    ImageSheet sheet
    Drawable p1
    //Animation testAnimation
    number elapsedTime = 0
    number fps = 4
    number frame = 1
    

    action Main

        StartGame()
    end

    action CreateGame

        /***********************************************************************
        Setup for loading a Battle (test version for now, will be adapted to
        the generalized loading a Level setup in the future.

        NOTE: For now, if working within the main class, just comment out this
        section of code to avoid my stuff screwing yours up.

                                                            - Matt
        ***********************************************************************/
        Player player   //placeholder for now
        Array<number> baseElementsEffectiveness
        baseElementsEffectiveness:Add(1.0)
        baseElementsEffectiveness:Add(0.7)
        baseElementsEffectiveness:Add(1.0)
        baseElementsEffectiveness:Add(1.0)
        baseElementsEffectiveness:Add(0.5)
        baseElementsEffectiveness:Add(1.0)
        Array<number> currentElementsEffectiveness
        currentElementsEffectiveness:Add(1.0)
        currentElementsEffectiveness:Add(0.7)
        currentElementsEffectiveness:Add(1.0)
        currentElementsEffectiveness:Add(1.0)
        currentElementsEffectiveness:Add(0.5)
        currentElementsEffectiveness:Add(1.0)
        player:SetStats("<Player>", 2000, 2000, 5, 5, 1, 1, currentElementsEffectiveness, baseElementsEffectiveness)
        Enemy enemy

        Battle battle
        battle:SetGame(me)
        battle:SetRemovalArray(removalArray)
        battle:LoadLevel()
        battle:Initialize(player, enemy)
        inCombat = true

        /***********************************************************************
        End of Matt's Testing Section
        ***********************************************************************/

//        //Allows for collisions
//        EnablePhysics2D(true)
//        
//        map1:loadMap(maps:TEST_MAP)
//        map1:loadCollisionLayer(maps:TEST_MAP)
//        
//        // test if map uploads
//        /*map1:loadMap(maps:CASTLE_MAP)
//        map1:loadCollisionLayer(maps:CASTLE_MAP)*/
//
//        player1:DrawPlayer()
//
//        //Add the drawables to the default layer
//        Add(map1:testMap) 
//
//        //Render all of the collision objects
//        i = 0
//        repeat map1:collisions:GetSize() times
//            Add(map1:collisions:Get(i))
//            i = i + 1
//        end
//
//        Add(player1:playerSprite)
//
//        //Makes the player collidable and responsive to collisions
//        player1:playerSprite:EnablePhysics(true)
//        player1:playerSprite:SetResponsive()
//        
//        AddCollisionListener(me)
//
//        //For animations
//        testAnimation:LoadImageSheet()
//        testAnimation:LoadFrame()
//        Add(testAnimation:girl)
//        sheet:Load("/Assets/ImageSheets/girl.atlas")
//        p1:Load(sheet:GetDrawable("Girl frame 1"))
//        Add(p1)
        
        /***********************************************************************
        Start test section
        * It should load the FOREST with 3 objects with different interactions
        * PLAYER should use [SPACE] to trigger behaviors
          1. Black box, no collision    (dialogue)
            - 3 Lines of dialogue
          2. Clear box, with collision  (dialogue)
            - 2 Lines of dialogue (overlaps the chair in the map)
          3. White box, no collision    (transition)
            - Transitions to CASTLE
                                                                  -Ryan
        ***********************************************************************/
///*      Currently Commented   [COMMENT-OUT / REMOVE THIS LINE TO TEST!]

   // Initialize the MAP
//        EnablePhysics2D(true)
//        map1:loadMap(maps:FOREST_MAP)
//        map1:loadCollisionLayer(maps:FOREST_MAP)
//        Add(map1:testMap)
//        i = 0
//        repeat map1:collisions:GetSize() times
//            Add(map1:collisions:Get(i))
//            i = i + 1
//        end
//		
//        // Initialize the PLAYER
//        player1:DrawPlayer()
//        player1:playerSprite:EnablePhysics(true)
//        player1:playerSprite:CanRotate(false)
//        player1:playerSprite:SetResponsive()
//        player1:playerSprite:SetName("player")
//		
//        // Enable Collisions in the game
//        AddCollisionListener(me)
//		
//        // Add INTERACTABLEs to the game (Currently 3)
//        // * This part is currently HARD-CODED for testing
//        // * Likely parse a JSON file of INTERACTABLEs info
//        // * Could store the INTERACTABLE LIST with each map (Edit Map.quorum)
//        integer index = 0
//        repeat until index = 3
//            // Create a new INTERACTABLE to add to the LIST
//            Interactable fillerInteractable
//            npcList:Add(fillerInteractable)
//			
//            // Hard-Coded Objects to add for testing
//            if index = 0
//                // A clear box overlapping the CHAIR in the MAP
//                // Interacts via DIALOGUE
//                npcList:Get(index):CreateInteractable("Wooden Chair", "clear", 11, 5.5, true)
//                DialogueBehavior newDialogue1
//                newDialogue1:AddDialogue("There is a chair infront of you.")
//                newDialogue1:AddDialogue("It is TANGIBLE.")
//                npcList:Get(index):SetInteractableBehavior(newDialogue1, "dialogue")
//            elseif index = 1
//                // A black box that has no collision
//                // Interacts via DIALOGUE
//                npcList:Get(index):CreateInteractable("Black Box", "default", 10, 4, false)
//                DialogueBehavior newDialogue1
//                newDialogue1:AddDialogue("You cannot touch this black box (INTANGIBLE).")
//                newDialogue1:AddDialogue("It shows interaction without physical collision.")
//                newDialogue1:AddDialogue("It is under your sprite (due to being before later).")
//                npcList:Get(index):SetInteractableBehavior(newDialogue1, "dialogue")
//            elseif index = 2
//                // A cyan box that has no collision
//                // Interacts via MAP-TRANSITION
//                npcList:Get(index):CreateInteractable("Back to Castle", "clear", 0, 4, false)
//                npcList:Get(index):LoadFilledRectangle(32,32,color:Cyan())
//                MapTransitionBehavior newTransition1
//                newTransition1:SetTransition(map1, maps:CASTLE_MAP, npcList)
//                newTransition1:SetCoordinates(16, 12)
//
////                // Test Section of adding INTERACTABLEs to the new MAP
////                Interactable newInteractable
////                newInteractable:CreateInteractable("Back to Forest", "clear", 17, 12, false)
////                newInteractable:LoadFilledRectangle(32,32,color:Cyan())
////                MapTransitionBehavior newTransition2
////                newTransition2:SetTransition(map1, maps:FOREST_MAP, npcList)
////                newTransition2:SetCoordinates(1, 4)
////
//////    // THIS PART DOES NOT WORK
//////    //            j = 0
//////    //            repeat npcList:GetSize() times
//////    //                newTransition2:AddNPC(npcList:Get(j))
//////    //                j = j + 1
//////    //            end
////
////                newInteractable:SetInteractableBehavior(newTransition2, "transition")
////                newTransition1:AddNPC(newInteractable)
//
//                npcList:Get(index):SetInteractableBehavior(newTransition1, "transition")
//            end
//			
//            // Add the INTERACTABLEs to the game
//            Add(npcList:Get(index))
//            AddKeyboardListener(npcList:Get(index))
//            index = index + 1
//        end
//		
//        // Add the PLAYER after everything to be in the foreground
//        Add(player1:playerSprite)
//
//        // Add the above layers
//        map1:loadAboveLayer(maps:FOREST_MAP)
//        Add(map1:aboveLayer)
//		
//        // Set the camera
//        camera = GetCamera2D()
//        camera:SetPosition(player1:playerSprite:GetX() + 200, player1:playerSprite:GetY() + 200, 0)
        /***********************************************************************
        End test Section
        ***********************************************************************/
    end

    action Update(number seconds)
        //Necessary for removing unneeded objects
        behaviorQueue:Update(seconds)
        repeat until removalArray:IsEmpty()
            Remove(removalArray:RemoveFromFront())
        end

    /**********************************************************************
        TESTING RYAN'S LOGIC - used to accept player input
    ***********************************************************************/

//        // Movement using WASD
//        // Get current location
//        newY = player1:playerSprite:GetY()
//        newX = player1:playerSprite:GetX()
//
//        // Add/Sub to both X and Y based on keys
//        if monitor:IsKeyPressed(keys:W)
//            newY = newY + plyrSpeed * seconds
//            
//            // for animation -- commented out for testing
//            /*newY = testAnimation:girl:GetY() + plyrSpeed * seconds
//            //for animation
//            if elapsedTime >= 1/fps
//                frame = frame + 1
//            if frame > 3
//                frame = 1 
//            end
//            testAnimation:ChangeFrame()
//            elapsedTime = elapsedTime - 1/fps
//            end*/
//        end
//        if monitor:IsKeyPressed(keys:S)
//            newY = newY - plyrSpeed * seconds
//        end
//        if monitor:IsKeyPressed(keys:D)
//            newX = newX + plyrSpeed * seconds
//        end
//        if monitor:IsKeyPressed(keys:A)
//            newX = newX - plyrSpeed * seconds
//        end
//
//        // Checks if PLAYER is out of bounds
//        if newY < 0
//            newY = 0
//        end
//        if newX < 0
//            newX = 0
//        end
//        if newY > map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
//            newY = map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
//        end
//        if newX > map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
//            newX = map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
//        end
//
//        player1:playerSprite:SetPosition(newX,newY)
        
    /**********************************************************************
        END OF PLAYER INPUT LOGIC
    ***********************************************************************/  
	   
    /***********************************************************************
        Sprite Animation
		- Jania & Maria
    ***********************************************************************/	
	
	/*
	// 	UPDATED - commented out for testing
		if monitor:IsKeyPressed(keys:W)
            newY = testAnimation:girl:GetY() + plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                frame = frame + 1
            if frame > 3
                frame = 1 
            end
            currentFrame = testAnimation:GetFrame()
            testAnimation:SetFrame(currentFrame + 1)
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:S)
            newY = testAnimation:girl:GetY() - plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                frame = frame + 1
            if frame > 3
                frame = 1 
            end
            currentFrame = testAnimation:GetFrame()
            testAnimation:SetFrame(currentFrame + 1)
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:D)
            newX = testAnimation:girl:GetX() + plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                frame = frame + 1
            if frame > 3
                frame = 1 
            end
            currentFrame = testAnimation:GetFrame()
            testAnimation:SetFrame(currentFrame + 1)
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:A)
            newX = testAnimation:girl:GetX() - plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
        if elapsedTime >= 1/fps
            frame = frame + 1
            if frame > 3
                frame = 1 
            end
            currentFrame = testAnimation:GetFrame()
            testAnimation:SetFrame(currentFrame + 1)
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end
        end
        
        testAnimation:girl:SetPosition(newX,newY)
    */
    
    end
	
    /***********************************************************************
        END Sprite Animation
    ***********************************************************************/
	  
    action AddBehavior(Behavior behavior)
        behaviorQueue:AddBehavior(behavior)
    end

    action AddToRemove(Item2D item)
        removalArray:Add(item)
    end

    action BeginCollision(CollisionEvent2D event)
        output "OW!"
//        CheckForInteraction(event, true)
    end
	
    action FinishCollision(CollisionEvent2D event)
//        CheckForInteraction(event, false)
    end

    // This action checks if the collision involes the player
    // and an Interactable Object.  If so, it toggles the
    // interactable such that presing [SPACE] should proceed
    // with the given dialoge.
    // * The checking is based on the NAME of the DRAWABLES
    //   > Interactable MUST inherit Drawable for type casting
   action CheckForInteraction(CollisionEvent2D event, boolean entering)
    /***********************************************************************
    Collision detection for Interactable Objects (NPCs, Objects, etc.)
    It is currently commented-out so that nothing breaks
                                                        - Ryan
    ***********************************************************************/
///*      MAIN INTERACTABLE ACITON - ALLOWS FOR INTERACTIONS W/ PLAYER
        // Variable used to determine if interaction is available
        boolean interaction = false
        boolean alreadyInteracting = false

        // Cast collision items as Drawables to use them
        Drawable itemA = cast(Drawable, event:GetItemA())
        Drawable itemB = cast(Drawable, event:GetItemB())

        // If PLAYER is in front (added later), swap items
        if itemB:GetName() = "player"
            Drawable itemC = itemB
            itemB = itemA
            itemA = itemC
        end

        // Check if PLAYER & INTERACTABLE
        if itemA:GetName() = "player"
            if itemB:GetName() = "interactable"
                interaction = true
            end
        end
        
        // If interaction is available, enable/disable it
        if interaction
            Interactable newItemB = cast(Interactable, itemB)

            i = 0
            repeat npcList:GetSize() times
                if npcList:Get(i):IsInteracting()
                    alreadyInteracting = true
                end
                i = i + 1
            end

            if entering and not alreadyInteracting
                newItemB:ToggleInteraction()
            elseif not entering
                if newItemB:IsInteracting()
                    output ""
                    newItemB:ToggleInteraction()
                end
            end
        end
    /***********************************************************************
    End of Ryan's Testing Section
    ***********************************************************************/
    end

    action SetMap(Map newMap)
        map1 = newMap
    end

    action GetPlayer() returns Player
        return player1
    end

    action SetNpcList(Array<Interactable> newList)
        npcList = newList
    end
end
