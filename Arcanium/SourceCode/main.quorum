use Libraries.Game.Game
use Libraries.Game.GameDisplay
use Libraries.Game.DesktopConfiguration
use Libraries.Game.DesktopDisplay
use Libraries.Game.GameDisplay 
use Libraries.Game.ScreenResolution
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.InputMonitor
use Libraries.Game.InputSet
use Libraries.Game.InputTable
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Controls.Button
use Libraries.Interface.Layouts.Layout
use Libraries.System.Console
use Libraries.Interface.Behaviors.Behavior
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.ImageSheet
use Libraries.Game.Graphics.Camera      // Adds Camera
use Libraries.Interface.Layouts.ManualLayout

class Main is Game, CollisionListener2D, KeyboardListener
//==============================================================================
//                             VARIABLE DECLARATION
//==============================================================================    
   
    //Application Configurations
    DesktopConfiguration deskConfig
    DesktopDisplay deskDisplay
    
    //Queue for storing subsequent Behaviors
    BehaviorQueue behaviorQueue

    //Queue for removing objects
    Array<Item2D> removalArray

    //Entities
    Map map1
    Player player1
	
    // For Interaction testing      -Ryan
    Array<Interactable> npcList
    Camera camera = undefined  // Camera

    //For drawing images
    Drawable testmap
    Drawable player
    Drawable box
    Drawable background
    Color color   

    //For player movement
    number newX = 0
    number newY = 0
    number plyrSpeed = 100
    KeyboardEvent keys
    InputMonitor monitor

    //Input Sets
    InputTable controlTable
    InputSet upButton
    InputSet downButton
    InputSet leftButton
    InputSet rightButton
    InputSet selectButton
    InputSet backButton
    InputSet menuButton

    //For Input Rebinding
    boolean upRebinding = false
    boolean downRebinding = false
    boolean leftRebinding = false
    boolean rightRebinding = false
    boolean selectRebinding = false
    boolean backRebinding = false
    boolean menuRebinding = false

    //Map Names
    //TO-DO: Export this in the future to a file that we can directly reference in this file
    MapList maps
 
    //For animations
    Animation test1
    Animation test2
    Animation test3
    number elapsedTime = 0
    number fps = 4
    integer currentFrame = 1
    number spaceX = 0
    number spaceY = 0
    text spriteImgSheet = "Hero"
    text spriteFrame = "Hero"
    text spriteImage = "alien"
    text fireImgSheet = "fire"
    text fireFrame = "Fire"

    boolean doneCreating = false

    //For audio
    GameAudioManager audioManager
    CinematicSequencer cineSequencer
//==============================================================================
//                             PREBUILT ACTIONS
//==============================================================================
    
    action Main

        StartGame()
    end

    action CreateGame
        doneCreating = true

        //SetResolution()
        SetKeyboardInput()
        CreateBackground()  
        
        // ***These 3 must be commented out for DebugMenuTest() -Maria***
        //InitializeMap(map1, maps:FOREST_MAP)
        //InitializePlayer(player1)
        //LoadAboveLayer(map1, maps:FOREST_MAP)

        //==TEST CALLS==
        //Array<text> enemies
        //enemies:Add("Goblin")
        //enemies:Add("Goblin Shaman")
        //enemies:Add("Goblin")
        //CombatTest(enemies)
        //InputTest()
        //InteractablesTest()
        //InitializeAnimTest()
        //InitializeSpellAnimTest()
        //InitializeAudioTest()
        //CineSequencerTest()
        DebugMenuTest()
    end

    action Update(number seconds)

        if not doneCreating
            return now
        end

        // Check if Behaviors are queued
        behaviorQueue:Update(seconds)
        cineSequencer:Update(seconds)

//        if(cineSequencer:IsFinished())
//            PlayerMovement(seconds)
//        end
        
		//ScriptedAnimTest(seconds)
		// SpellAnim(seconds)
		// PlayerMovementWithAnim(seconds)


        // Necessary for removing unneeded objects
        repeat until removalArray:IsEmpty()
            Remove(removalArray:RemoveFromFront())
        end
    end

//==============================================================================
//                             CUSTOM ACTIONS
//==============================================================================
	  
    action AddToRemove(Item2D item)
        removalArray:Add(item)
    end

    action InitializeMap(Map currMap, Text mapName)
    //Loads map image, collision, and adds it to layer.
        EnablePhysics2D(true)
        currMap:loadMap(mapName)
        currMap:loadCollisionLayer(mapName)
        Add(currMap:testMap)
        i = 0
        repeat currMap:collisions:GetSize() times
            Add(currMap:collisions:Get(i))
            i = i + 1
        end
	AddCollisionListener(me)	
    end

    action LoadAboveLayer(Map currMap, Text mapName)
        if(currMap:inAboveMaps(mapName))
            currMap:loadAboveLayer(mapName)
            Add(currMap:aboveLayer)
        end
    end

    action InitializePlayer(Player player)
        //Loads player image, enables collision/movement, does NOT add to layer.
        player:DrawPlayer()
        player:playerSprite:EnablePhysics(true)
        player:playerSprite:CanRotate(false)
        player:playerSprite:SetResponsive()
        player:playerSprite:SetName("player")
        Add(player:playerSprite)

        //Sets camera onto player.
        camera = GetCamera2D()
        camera:SetPosition(player1:playerSprite:GetX(), player1:playerSprite:GetY(), 0)
        //camera:SetZoom(2)
    end

    action PlayerMovement(number seconds)
         // Movement using WASD
        // Get current location
        newY = player1:playerSprite:GetY()
        newX = player1:playerSprite:GetX()

        // Add/Sub to both X and Y based on keys
        if monitor:IsKeyPressed(upButton:GetInputValue())
            newY = newY + plyrSpeed * seconds
            
            // for animation -- commented out for testing
            /*newY = testAnimation:girl:GetY() + plyrSpeed * seconds
            //for animation
            if elapsedTime >= 1/fps
                frame = frame + 1
            if frame > 3
                frame = 1 
            end
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end*/
        end
        if monitor:IsKeyPressed(keys:S)
            newY = newY - plyrSpeed * seconds
        end
        if monitor:IsKeyPressed(rightButton:GetInputValue())
            newX = newX + plyrSpeed * seconds
        end
        if monitor:IsKeyPressed(keys:A)
            newX = newX - plyrSpeed * seconds
        end
        
        // Checks if PLAYER is out of bounds
        if newY < 0
            newY = 0
        end
        if newX < 0
            newX = 0
        end
        if newY > map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
            newY = map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
        end
        if newX > map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
            newX = map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
        end

        player1:playerSprite:SetPosition(newX,newY)
        camera = GetCamera2D()
        camera:SetPosition(player1:playerSprite:GetX(), player1:playerSprite:GetY(), 0)
        
    end

    action CheckForInteraction(CollisionEvent2D event, boolean entering)

    // This action checks if the collision involes the player
    // and an Interactable Object.  If so, it toggles the
    // interactable such that presing [SPACE] should proceed
    // with the given dialoge.
    // * The checking is based on the NAME of the DRAWABLES
    //   > Interactable MUST inherit Drawable for type casting

    /***********************************************************************
    Collision detection for Interactable Objects (NPCs, Objects, etc.)
    It is currently commented-out so that nothing breaks
                                                        - Ryan
    ***********************************************************************/
///*      MAIN INTERACTABLE ACITON - ALLOWS FOR INTERACTIONS W/ PLAYER
        // Variable used to determine if interaction is available
        boolean interaction = false
        boolean alreadyInteracting = false

        // Cast collision items as Drawables to use them
        Drawable itemA = cast(Drawable, event:GetItemA())
        Drawable itemB = cast(Drawable, event:GetItemB())

        // If PLAYER is in front (added later), swap items
        if itemB:GetName() = "player"
            Drawable itemC = itemB
            itemB = itemA
            itemA = itemC
        end

        // Check if PLAYER & INTERACTABLE
        if itemA:GetName() = "player"
            if itemB:GetName():Contains("Interactable") or maps:Has(itemB:GetName()) // updated this because interactables will be named in tiled as "Something Interactable" 
                interaction = true
            end
        end
        
        // If interaction is available, enable/disable it
        if interaction
            Interactable newItemB = cast(Interactable, itemB)

            i = 0
            repeat map1:interactables:GetSize() times
                if map1:interactables:Get(i):IsInteracting()
                    alreadyInteracting = true
                end
                i = i + 1
            end

            if entering and not alreadyInteracting
                newItemB:ToggleInteraction(itemB:GetName())
            elseif not entering
                if newItemB:IsInteracting()
                    output ""
                    newItemB:ToggleInteraction(itemB:GetName())
                end
            end
        end
    end

    action SetMap(Map newMap)
        map1 = newMap
    end

    action GetPlayer() returns Player
        return player1
    end

    action SetNpcList(Array<Interactable> newList)
        npcList = newList
    end

    action SetResolution()
        Array<ScreenResolution> array = GetAvailableResolutions()
        ScreenResolution resolution = array:Get(21) //800x600 144hz
        SetScreenResolution(resolution)
        SetFullScreen(false)
    end

    action CreateBackground()
        Drawable background
        background:LoadFilledRectangle(1920*2,1080*2)
        background:SetPosition(-1920/2, -1080/2)
        Add(background)
    end

//==============================================================================
//                          Input Rebinding
//==============================================================================

    action SetKeyboardInput()
        AddKeyboardListener(me)
        upButton:SetKeyboardInput(keys:W)
        downButton:SetKeyboardInput(keys:S)
        leftButton:SetKeyboardInput(keys:A)
        rightButton:SetKeyboardInput(keys:D)
        selectButton:SetKeyboardInput(keys:SPACE)
        backButton:SetKeyboardInput(keys:Q)
        menuButton:SetKeyboardInput(keys:I)
    end

    action RebindKey(InputSet in)
        //RebindKeys rebind
        KeyboardEvent key
        output "Rebinding"
        if (in = upButton)
            upRebinding = true
            output "rebinding upButton"
        end
        if (in = downButton)
            downRebinding = true
            output "rebinding downButton"
        end
        if (in = leftButton)
            leftRebinding = true
            output "rebinding leftButton"
        end
        if (in = rightButton)
            rightRebinding = true
            output "rebinding rightButton"
        end
        if (in = selectButton)
            selectRebinding = true
            output "rebinding selectButton"
        end
        if (in = backButton)
            backRebinding = true
            output "rebinding backButton"
        end
        if (in = menuButton)
            menuRebinding = true
            output "rebinding menuButton"
        end
    end

    action PressedKey(KeyboardEvent event)
        if (not upRebinding or not downRebinding or not leftRebinding
            or not rightRebinding or not selectRebinding or not backRebinding
            or not menuRebinding)
            if event:keyCode = upButton:GetInputValue()
                output "up pressed"
            end
            if event:keyCode = downButton:GetInputValue()
                output "down pressed"
            end
            if event:keyCode = leftButton:GetInputValue()
                output "left pressed"
            end
            if event:keyCode = rightButton:GetInputValue()
                output "right pressed"
            end
            if event:keyCode = selectButton:GetInputValue()
                output "select pressed"
            end
            if event:keyCode = backButton:GetInputValue()
                output "back pressed"
            end
            if event:keyCode = menuButton:GetInputValue()
                output "menu pressed"
            end
        end
        if (upRebinding)
            if not (event:keyCode = downButton:GetInputValue() or 
                event:keyCode = leftButton:GetInputValue() or
                event:keyCode = rightButton:GetInputValue() or
                event:keyCode = selectButton:GetInputValue() or
                event:keyCode = backButton:GetInputValue() or
                event:keyCode = menuButton:GetInputValue())

                upButton:SetKeyboardInput(event:keyCode)
                output "up rebound to " + event:keyCode
            end
            upRebinding = false
        end
        if (downRebinding)
            if not (event:keyCode = upButton:GetInputValue() or 
                event:keyCode = leftButton:GetInputValue() or
                event:keyCode = rightButton:GetInputValue() or
                event:keyCode = selectButton:GetInputValue() or
                event:keyCode = backButton:GetInputValue() or
                event:keyCode = menuButton:GetInputValue())

                downButton:SetKeyboardInput(event:keyCode)
                output "down rebound to " + event:keyCode
            end
            downRebinding = false
        end
        if (leftRebinding)
            if not (event:keyCode = upButton:GetInputValue() or 
                event:keyCode = downButton:GetInputValue() or
                event:keyCode = rightButton:GetInputValue() or
                event:keyCode = selectButton:GetInputValue() or
                event:keyCode = backButton:GetInputValue() or
                event:keyCode = menuButton:GetInputValue())

                leftButton:SetKeyboardInput(event:keyCode)
                output "left rebound to " + event:keyCode
            end
            leftRebinding = false
        end
        if (rightRebinding)
            if not (event:keyCode = upButton:GetInputValue() or 
                event:keyCode = downButton:GetInputValue() or
                event:keyCode = leftButton:GetInputValue() or
                event:keyCode = selectButton:GetInputValue() or
                event:keyCode = backButton:GetInputValue() or
                event:keyCode = menuButton:GetInputValue())

                rightButton:SetKeyboardInput(event:keyCode)
                output "right rebound to " + event:keyCode
            end
            rightRebinding = false
        end
        if (selectRebinding)
            if not (event:keyCode = upButton:GetInputValue() or 
                event:keyCode = downButton:GetInputValue() or
                event:keyCode = leftButton:GetInputValue() or
                event:keyCode = rightButton:GetInputValue() or
                event:keyCode = backButton:GetInputValue() or
                event:keyCode = menuButton:GetInputValue())

                selectButton:SetKeyboardInput(event:keyCode)
                output "select rebound to " + event:keyCode
            end
            selectRebinding = false
        end
        if (backRebinding)
            if not (event:keyCode = upButton:GetInputValue() or 
                event:keyCode = downButton:GetInputValue() or
                event:keyCode = leftButton:GetInputValue() or
                event:keyCode = rightButton:GetInputValue() or
                event:keyCode = selectButton:GetInputValue() or
                event:keyCode = menuButton:GetInputValue())

                backButton:SetKeyboardInput(event:keyCode)
                output "back rebound to " + event:keyCode
            end
            backRebinding = false
        end
        if (menuRebinding)
            if not (event:keyCode = upButton:GetInputValue() or 
                event:keyCode = downButton:GetInputValue() or
                event:keyCode = leftButton:GetInputValue() or
                event:keyCode = rightButton:GetInputValue() or
                event:keyCode = selectButton:GetInputValue() or
                event:keyCode = backButton:GetInputValue())

                menuButton:SetKeyboardInput(event:keyCode)
                output "menu rebound to " + event:keyCode
            end
            menuRebinding = false
        end
    end

    action InputTest()
        output "rebinding"
        RebindKey(upButton)
    end

//==============================================================================
//                             FOR TESTING
//==============================================================================

    action CombatTest(Array<text> enemies)
        Array<number> currentElementsEffectiveness
        currentElementsEffectiveness:Add(1.0)
        currentElementsEffectiveness:Add(0.7)
        currentElementsEffectiveness:Add(1.0)
        currentElementsEffectiveness:Add(1.0)
        currentElementsEffectiveness:Add(0.5)
        currentElementsEffectiveness:Add(1.0)
        Array<integer> currentElementTokens
        currentElementTokens:Add(4)
        currentElementTokens:Add(4)
        currentElementTokens:Add(4)
        currentElementTokens:Add(4)
        currentElementTokens:Add(4)
        currentElementTokens:Add(4)
        player1:SetStats("<Player>", 2000, 2000, 5, 5, 0, 1, 1, currentElementsEffectiveness, currentElementTokens)
        player1:SetGame(me)
        player1:SetRemovalArray(removalArray)
        player1:SetBehaviorQueue(behaviorQueue)

        Battle battle
        battle:SetGame(me)
        battle:SetRemovalArray(removalArray)
        battle:SetBehaviorQueue(behaviorQueue)
        battle:LoadLevel()
        battle:Initialize(player1, enemies)
        inCombat = true

    end
    
    action CineSequencerTest()

        //Setup
        Animation cineAnimation
        cineAnimation:LoadImageSheet(spriteImgSheet)
        cineAnimation:LoadFrame(spriteFrame)
        Add(cineAnimation:sprite1)

        //Cinematic Behaviors
        PanCameraBehavior   cameraPan1
        PanCameraBehavior   cameraPan2
        WaitForBehavior     wait1
        WaitForBehavior     wait2
        DialogueBehavior    dialogue1
        MoveNPCBehavior     moveTest1

        //Behavior Setup
        wait1:              SetWaitDuration(0.3)
        cameraPan1:         SetCameraPan(25,40, 5)
        wait2:              SetWaitDuration(3)
        cameraPan2:         SetCameraPan(40,0, 5)
        dialogue1:          AddDialogue("Cinematic Sequencer Dialogue Test 1")
        dialogue1:          AddDialogue("Cinematic Sequencer Dialogue Test 2")
        moveTest1:SetAnimation(cineAnimation, spriteImgSheet)
        moveTest1:SetMoveDirection(15,0,5)

        //Adding Behaviors to Sequencer
        cineSequencer:AddCineEvent(moveTest1, true)
        cineSequencer:AddCineEvent(wait1, true)
        cineSequencer:AddCineEvent(cameraPan1, true)
        cineSequencer:AddCineEvent(wait2, true)
        cineSequencer:AddCineEvent(cameraPan2, true)

        cineSequencer:PlayCineSequence()
    end

    // Load images for sample animations, call in action CreateGame
    action InitializeAnimTest()
        test1:LoadImageSheet(spriteImgSheet)
        test1:LoadFrame(spriteFrame)
        Add(test1:sprite1)
        test2:LoadImage(spriteImage)
        Add(test2:sprite2)
        test2:sprite2:Scale(0.25)
    end

    // Load images for spell animations, call in action CreateGame
    action InitializeSpellAnimTest()
        test3:LoadImageSheet(fireImgSheet)
        test3:LoadFrame(fireFrame)
        Add(test3:sprite1)
    end

    action InitializeAudioTest()
        /**************************************************************
                        Ryan's Audio Testing Section
          * Currently does nothing as I didn't add any test files
          * Has examples of using the GameAudioManager:
            > Adding a sound effect (GameSound)
            > Adding music (Music)
            > Playing music
        **************************************************************/
        // Add each audio file to the GameAudioManager
        // * Example of adding a sound effect
//        audioManager:AddAudio("Effect_01", "wav", "effect")

        // * Example of adding music
//        audioManager:AddAudio("Music_01", "ogg", "music")

        // * Example of playing specific music
        audioManager:PlayAudio("Music_01")
    end

    action InteractablesTest()
    /***********************************************************************
    Used for loading in a map to test Interactable dialogue as well as
    the map transition behavior.

                                                        - Lisel
    ***********************************************************************/

        // Initialize the MAP
        EnablePhysics2D(true)
        map1:loadMap(maps:LIBRARY_MAP)
        map1:loadCollisionLayer(maps:LIBRARY_MAP) // collisions
        map1:loadInteractables(maps:LIBRARY_MAP) // interactables (right now, these are dialogs)
        map1:loadMapTransitions(maps:LIBRARY_MAP) // map transitions (will transfer player to a new map)

        Add(map1:testMap)

        // add all of the collisions to the map
        i = 0
        repeat map1:collisions:GetSize() times
            Add(map1:collisions:Get(i))
            i = i + 1
        end

        // add all of the interactables to the map
        map1:getInteractablesData(map1:name)
        i = 0
        repeat map1:interactables:GetSize() times
            Interactable curr = map1:interactables:Get(i)
            Add(curr) // adds each interactable to the game
            AddKeyboardListener(curr) // add keyboard listener for each interactable
            InteractableData data = map1:interactableData:Get(i)
            curr:CreateDialogueBehavior(data)
            // add in the behavior for the interactable (call a method)
            i = i + 1
        end

        // add all of the transitions to the map
        i = 0
        repeat map1:transitions:GetSize() times
            Interactable curr = map1:transitions:Get(i)
            Add(curr) // adds each map transition to the game
            AddKeyboardListener(curr) // add keyboard listener for each transition
            curr:CreateMapTransitionBehavior(map1, curr:GetName()) // will then call the SetTransition in MapTransitionBehavior
            i = i + 1
        end
		
        // Initialize the PLAYER
        player1:DrawPlayer()
        player1:playerSprite:EnablePhysics(true)
        player1:playerSprite:CanRotate(false)
        player1:playerSprite:SetResponsive()
        player1:playerSprite:SetName("player")
		
        // Enable Collisions in the game
        AddCollisionListener(me)
        
        // Add the PLAYER after everything to be in the foreground
        Add(player1:playerSprite)

        // Add the above layers
        map1:loadAboveLayer(maps:LIBRARY_MAP)
        Add(map1:aboveLayer)
        
    end

    // Animation without keys, call in action Updates
    action ScriptedAnimTest(number seconds)
        elapsedTime = elapsedTime + seconds
        if elapsedTime >= 1/fps
            currentFrame = test1:GetFrame()
            test1:SetFrame(currentFrame + 1)
            test1:ChangeFrame(spriteFrame)
            elapsedTime = elapsedTime - 1/fps
        end
    end

    /************************************************
    Spell Animations -- call in action Updates
    HOW TO:
    In variable declarations, declare: 
    Animation <name> (i.e., Animation test3)
    text <elementName>ImgSheet = "<elementName>
     text <elementName>Frame = "<ElementName>"
     (i.e., text fireImgSheet = "fire"
            text fireFrame = "Fire")
     Call InitializeSpellAnimTest() in action CreateGame
     ************************************************/
     action SpellAnim(number seconds)
     elapsedTime = elapsedTime + seconds
     	if elapsedTime >= 1/fps
        	currentFrame = test3:GetFrame()
        	test3:SetFrame(currentFrame + 1)
        	test3:ChangeFrame(fireFrame)
        	//test3:sprite1:Scale(0.9)  // shrinks in size
        	elapsedTime = elapsedTime - 1/fps
     	end
     end

     // Animation with keys, call in action Updates
     action PlayerMovementWithAnim(number seconds)
     	newY = test1:sprite1:GetY()
        	newX = test1:sprite1:GetX()
           	
        if monitor:IsKeyPressed(keys:W)
            newY = test1:sprite1:GetY() + plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                currentFrame = test1:GetFrame()
                test1:SetFrame(currentFrame + 1)
                test1:ChangeFrame(spriteFrame)
                elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:S)
            newY = test1:sprite1:GetY() - plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                currentFrame = test1:GetFrame()
                test1:SetFrame(currentFrame + 1)
                test1:ChangeFrame(spriteFrame)
                elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:D)
            newX = test1:sprite1:GetX() + plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                currentFrame = test1:GetFrame()
                test1:SetFrame(currentFrame + 1)
                test1:ChangeFrame(spriteFrame)
                elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:A)
            newX = test1:sprite1:GetX() - plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
        	if elapsedTime >= 1/fps
            	currentFrame = test1:GetFrame()
            	test1:SetFrame(currentFrame + 1)
            	test1:ChangeFrame(spriteFrame)
            	elapsedTime = elapsedTime - 1/fps
        	end
    	end
        
        test1:sprite1:SetPosition(newX,newY)
     end

    /***********************************************************************
                       Maria's DEBUG MENU testing section.
                       
            ***Currently you must exit the Game window before 
                        loading and testing a new map***
               Buttons are only taking one transition at the moment.
    ***********************************************************************/
    /*
    action DebugCreateButton(Button button, text buttonText, number buttonPosX, number buttonPosY)
    button:SetName(buttonText)
    button:SetPosition(buttonPosX, buttonPosY)
    SetFocus(button)
    Add(button)
    end
    */

    // Initializes/creates buttons
    action DebugCreateButton(Button button, text buttonText, DebugMenuBehavior behavior, text mapName, text transitionMap)
    button:SetName(buttonText)
    behavior:SetMap(map1, mapName, transitionMap, player1)
    //SetFocus(button)
    Add(button)
    button:SetBehavior(behavior)
    end

    // Initializes debug menu for all maps
    action DebugMenuTest()
    ManualLayout layout
    me:SetLayout(layout)

    // Current maps. Add maps here.
    Button bTestMap
    Button bForest
    Button bCastle
    Button bLibrary
    Button bForestClearing
    Button bForestPath1
    Button bForestPath2
    Button bForestPath3
    Button bForestPath4
    Button bPrologueTown
    Button bRuinedTown
    Button bInteriorHouse
    Button bCamp

    // Behaviors for respective buttons above...
    DebugMenuBehavior testing1
    DebugMenuBehavior testing2
    DebugMenuBehavior testing3
    DebugMenuBehavior testing4
    DebugMenuBehavior testing5
    DebugMenuBehavior testing6
    DebugMenuBehavior testing7
    DebugMenuBehavior testing8
    DebugMenuBehavior testing9 
    DebugMenuBehavior testing10
    DebugMenuBehavior testing11
    DebugMenuBehavior testing12
    DebugMenuBehavior testing13

    // Current buttons. Initialize new buttons for new maps here.
    // Currently used for testing (general testing)
    // When setting a new button position, leave X at 0 for now, increment Y by 50 from previous button using SetPosition()
    // FOR NEW COLUMN: Increment X by 200
    // Button position defaulted at (0,0)
    // NOTE: I just assigned random transition maps for each button. Feel free to change these to the correct maps
    DebugCreateButton(bTestMap, "TestMap", testing1, maps:TEST_MAP, maps:FOREST_MAP)

    DebugCreateButton(bForest, "Forest", testing2, maps:FOREST_MAP, maps:FOREST_PATH_1_MAP)
    bForest:SetPosition(0, 50)

    DebugCreateButton(bCastle, "Castle", testing3, maps:CASTLE_MAP, maps:TEST_MAP)
    bCastle:SetPosition(0, 100)

    DebugCreateButton(bLibrary, "Library", testing4, maps:LIBRARY_MAP, maps:CASTLE_MAP)
    bLibrary:SetPosition(0, 150)

    DebugCreateButton(bForestClearing, "ForestClearing", testing5, maps:FOREST_CLEARING_MAP, maps:FOREST_MAP)
    bForestClearing:SetPosition(200, 0)

    DebugCreateButton(bForestPath1, "ForestPath1", testing6, maps:FOREST_PATH_1_MAP, maps:FOREST_PATH_2_MAP)
    bForestPath1:SetPosition(200, 50)

    DebugCreateButton(bForestPath2, "ForestPath2", testing7, maps:FOREST_PATH_2_MAP, maps:FOREST_PATH_3_MAP)
    bForestPath2:SetPosition(200, 100)

    DebugCreateButton(bForestPath3, "ForestPath3", testing8, maps:FOREST_PATH_3_MAP, maps:FOREST_PATH_4_MAP)
    bForestPath3:SetPosition(200, 150)

    DebugCreateButton(bForestPath4, "ForestPath4", testing9, maps:FOREST_PATH_4_MAP, maps:FOREST_MAP)
    bForestPath4:SetPosition(200, 200)

    DebugCreateButton(bPrologueTown, "PrologueTown", testing10, maps:PROLOGUE_TOWN_MAP, maps:RUINED_TOWN_MAP)
    bPrologueTown:SetPosition(400, 0)

    // THESE 3 BUTTONS ARE CURRENTLY CRASHING
    /*
    DebugCreateButton(bRuinedTown, "RuinedTown", testing11, maps:RUINED_TOWN_MAP, maps:TEST_MAP)
    bRuinedTown:SetPosition(-200, 50)
 
    DebugCreateButton(bInteriorHouse, "InteriorHouse", testing12, maps:INTERIOR_HOUSE_MAP, maps:TEST_MAP)
    bInteriorHouse:SetPosition(-200, 100)

    DebugCreateButton(bCamp, "Camp", testing13, maps:CAMP_MAP, maps:TEST_MAP)
    bCamp:SetPosition(-200, 150)
    */
    end
/***********************************************************************
                     End of Maria's debug menu section.
***********************************************************************/
end

//==============================================================================
//               COMMENTED OUT CODE (FOR REUSE OR FOR DELETION)
//============================================================================== 


//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------

//        ***********************************************************************/
//        INTERACTABLES CODE (MOVE THIS ALL TO A FUNCTION, (CTRL + /) TO UNCOMMENT), MOVED BY ALBERT
//        ***********************************************************************/
//
//        /***********************************************************************
//        Start test section
//        * It should load the FOREST with 3 objects with different interactions
//        * PLAYER should use [SPACE] to trigger behaviors
//          1. Black box, no collision    (dialogue)
//            - 3 Lines of dialogue
//          2. Clear box, with collision  (dialogue)
//            - 2 Lines of dialogue (overlaps the chair in the map)
//          3. White box, no collision    (transition)
//            - Transitions to CASTLE
//                                                                  -Ryan
//        ***********************************************************************/
//
//        // Add INTERACTABLEs to the game (Currently 3)
//        // * This part is currently HARD-CODED for testing
//        // * Likely parse a JSON file of INTERACTABLEs info
//        // * Could store the INTERACTABLE LIST with each map (Edit Map.quorum)
//        integer index = 0
//        repeat until index = 3
//            // Create a new INTERACTABLE to add to the LIST
//            Interactable fillerInteractable
//            npcList:Add(fillerInteractable)
//			
//            // Hard-Coded Objects to add for testing
//            if index = 0
//                // A clear box overlapping the CHAIR in the MAP
//                // Interacts via DIALOGUE
//                npcList:Get(index):CreateInteractable("Wooden Chair", "clear", 11, 5.5, true)
//                DialogueBehavior newDialogue1
//                newDialogue1:AddDialogue("There is a chair infront of you.")
//                newDialogue1:AddDialogue("It is TANGIBLE.")
//                npcList:Get(index):SetInteractableBehavior(newDialogue1, "dialogue")
//            elseif index = 1
//                // A black box that has no collision
//                // Interacts via DIALOGUE
//                npcList:Get(index):CreateInteractable("Black Box", "default", 10, 4, false)
//                DialogueBehavior newDialogue1
//                newDialogue1:AddDialogue("You cannot touch this black box (INTANGIBLE).")
//                newDialogue1:AddDialogue("It shows interaction without physical collision.")
//                newDialogue1:AddDialogue("It is under your sprite (due to being before later).")
//                npcList:Get(index):SetInteractableBehavior(newDialogue1, "dialogue")
//            elseif index = 2
//                // A cyan box that has no collision
//                // Interacts via MAP-TRANSITION
//                npcList:Get(index):CreateInteractable("Back to Castle", "clear", 0, 4, false)
//                npcList:Get(index):LoadFilledRectangle(32,32,color:Cyan())
//                MapTransitionBehavior newTransition1
//                newTransition1:SetTransition(map1, maps:CASTLE_MAP, npcList)
//                newTransition1:SetCoordinates(16, 12)

//                // Test Section of adding INTERACTABLEs to the new MAP
//                Interactable newInteractable
//                newInteractable:CreateInteractable("Back to Forest", "clear", 17, 12, false)
//                newInteractable:LoadFilledRectangle(32,32,color:Cyan())
//                MapTransitionBehavior newTransition2
//                newTransition2:SetTransition(map1, maps:FOREST_MAP, npcList)
//                newTransition2:SetCoordinates(1, 4)
//
////    // THIS PART DOES NOT WORK
////    //            j = 0
////    //            repeat npcList:GetSize() times
////    //                newTransition2:AddNPC(npcList:Get(j))
////    //                j = j + 1
////    //            end
//
//                newInteractable:SetInteractableBehavior(newTransition2, "transition")
//                newTransition1:AddNPC(newInteractable)
//
//                npcList:Get(index):SetInteractableBehavior(newTransition1, "transition")
//            end
//			
//            // Add the INTERACTABLEs to the game
//            Add(npcList:Get(index))
//            AddKeyboardListener(npcList:Get(index))
//            index = index + 1
//        end
//		
//        // Add the PLAYER after everything to be in the foreground
//        Add(player1:playerSprite)
//
//        // Add the above layers
//        map1:loadAboveLayer(maps:FOREST_MAP)
//        Add(map1:aboveLayer)
//		
//        // Set the camera
//        camera = GetCamera2D()
//        camera:SetPosition(player1:playerSprite:GetX() + 200, player1:playerSprite:GetY() + 200, 0)
//        /***********************************************************************
//        End test Section
//        ***********************************************************************/


//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------

    /**********************************************************************
        TESTING RYAN'S LOGIC - used to accept player input
    ***********************************************************************/

//        // Movement using WASD
//        // Get current location
//        newY = player1:playerSprite:GetY()
//        newX = player1:playerSprite:GetX()
//
//        // Add/Sub to both X and Y based on keys
//        if monitor:IsKeyPressed(keys:W)
//            newY = newY + plyrSpeed * seconds
//            
//            // for animation -- commented out for testing
//            /*newY = testAnimation:girl:GetY() + plyrSpeed * seconds
//            //for animation
//            if elapsedTime >= 1/fps
//                frame = frame + 1
//            if frame > 3
//                frame = 1 
//            end
//            testAnimation:ChangeFrame()
//            elapsedTime = elapsedTime - 1/fps
//            end*/
//        end
//        if monitor:IsKeyPressed(keys:S)
//            newY = newY - plyrSpeed * seconds
//        end
//        if monitor:IsKeyPressed(keys:D)
//            newX = newX + plyrSpeed * seconds
//        end
//        if monitor:IsKeyPressed(keys:A)
//            newX = newX - plyrSpeed * seconds
//        end
//
//        // Checks if PLAYER is out of bounds
//        if newY < 0
//            newY = 0
//        end
//        if newX < 0
//            newX = 0
//        end
//        if newY > map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
//            newY = map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
//        end
//        if newX > map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
//            newX = map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
//        end
//
//        player1:playerSprite:SetPosition(newX,newY)
        
    /**********************************************************************
        END OF PLAYER INPUT LOGIC
    ***********************************************************************/  
	

//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------

    /**********************************************************************
    More sample animations 
    ***********************************************************************/

        /*spaceX = test2:sprite2:GetX() + 50 * seconds
        spaceY = test2:sprite2:GetY() + 50 * seconds
        test2:sprite2:SetPosition(spaceX, spaceY)
        */

    
    /***********************************************************************
        Sprite Animation
		- Jania & Maria
    ***********************************************************************/	
	
	/*
	// 	UPDATED - commented out for testing
			newY = test1:sprite1:GetY()
        	newX = test1:sprite1:GetX()
           	
           	if monitor:IsKeyPressed(keys:W)
            newY = test1:sprite1:GetY() + plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                currentFrame = test1:GetFrame()
                test1:SetFrame(currentFrame + 1)
                test1:ChangeFrame(spriteFrame)
                elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:S)
            newY = test1:sprite1:GetY() - plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                currentFrame = test1:GetFrame()
                testAnimation:SetFrame(currentFrame + 1)
                test1:ChangeFrame(spriteFrame)
                elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:D)
            newX = test1:sprite1:GetX() + plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
            if elapsedTime >= 1/fps
                currentFrame = test1:GetFrame()
                test1:SetFrame(currentFrame + 1)
                test1:ChangeFrame(spriteFrame)
                elapsedTime = elapsedTime - 1/fps
            end

        elseif monitor:IsKeyPressed(keys:A)
            newX = test1:sprite1:GetX() - plyrSpeed * seconds
            elapsedTime = elapsedTime + seconds
        if elapsedTime >= 1/fps
            currentFrame = test1:GetFrame()
            test1:SetFrame(currentFrame + 1)
            test1:ChangeFrame(spriteFrame)
            elapsedTime = elapsedTime - 1/fps
        end
    end
        
        test1:sprite1:SetPosition(newX,newY)
    */
