use Libraries.Game.Game
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.InputMonitor
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Controls.Button
use Libraries.Interface.Layouts.Layout
use Libraries.System.Console
use Libraries.Interface.Behaviors.Behavior
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.ImageSheet

class Main is Game, CollisionListener2D
    
    //Queues for removing objects
    BehaviorQueue behaviorQueue
    Array<Item2D> removalQueue

    //Entities
    Map map1
    Player player1
	
    // For Interaction testing      -Ryan
    Array<Interactable> npcList

    //For drawing images
    Drawable testmap
    Drawable player
    Drawable box
    Color color   

    //For player movement
    number newX = 0
    number newY = 0
    number plyrSpeed = 100
    KeyboardEvent keys
    InputMonitor monitor

    //Map Names
    //TO-DO: Export this in the future to a file that we can directly reference in this file
    text TEST_MAP = "Testmap"
    text FOREST_MAP = "Forest"
    text CASTLE_MAP = "Castle"
 
    //For animations
    Animation testAnimation
    number elapsedTime = 0
    number fps = 4
    number frame = 1
    

    action Main

        StartGame()
    end

    action CreateGame

        /***********************************************************************
        Setup for loading a Battle (test version for now, will be adapted to
        the generalized loading a Level setup in the future.

        NOTE: For now, if working within the main class, just comment out this
        section of code to avoid my stuff screwing yours up.

                                                            - Matt
        ***********************************************************************/

//        Player player   //placeholder for now
//        
//        Battle battle
//        Slime sampleSlime
//        battle:SetGame(me)
//        battle:LoadLevel()
//        battle:Initialize(player, sampleSlime)

        /***********************************************************************
        End of Matt's Testing Section
        ***********************************************************************/

        //Allows for collisions
        EnablePhysics2D(true)
        
        map1:loadMap(TEST_MAP)
        map1:loadCollisionLayer(TEST_MAP)
        
        // test if map uploads
        /*map1:loadMap(CASTLE_MAP)
        map1:loadCollisionLayer(CASTLE_MAP)*/

        player1:DrawPlayer()

        //Add the drawables to the default layer
        Add(map1:testMap) 

        //Render all of the collision objects
        i = 0
        repeat map1:collisions:GetSize() times
            Add(map1:collisions:Get(i))
            i = i + 1
        end

        Add(player1:playerSprite)

        //Makes the player collidable and responsive to collisions
        player1:playerSprite:EnablePhysics(true)
        player1:playerSprite:CanRotate(false)
        player1:playerSprite:SetResponsive()
        
        AddCollisionListener(me)

        //For animations
//        testAnimation:LoadImageSheet()
//        testAnimation:LoadFrame()
//        Add(testAnimation:girl)
        
        /***********************************************************************
        Start test section
        * It should load the FOREST with 3 objects with different interactions
        * PLAYER should use [SPACE] to trigger behaviors
          1. Black box, no collision    (dialogue)
            - 3 Lines of dialogue
          2. Clear box, with collision  (dialogue)
            - 2 Lines of dialogue (overlaps the chair in the map)
          3. White box, no collision    (transition)
            - Transitions to CASTLE
                                                                  -Ryan
        ***********************************************************************/
/*      Currently Commented   [COMMENT-OUT / REMOVE THIS LINE TO TEST!]
        Remove(player1:playerSprite)
        Remove(map1:testMap)
        i = 0
        repeat map1:collisions:GetSize() times
            Remove(map1:collisions:Get(i))
            i = i + 1
        end
        map1:loadMap(FOREST_MAP)
        map1:loadCollisionLayer(FOREST_MAP)
        Add(map1:testMap)
        i = 0
        repeat map1:collisions:GetSize() times
            Add(map1:collisions:Get(i))
            i = i + 1
        end
        Add(player1:playerSprite)
        player1:playerSprite:EnablePhysics(true)
        player1:playerSprite:CanRotate(false)
        player1:playerSprite:SetResponsive()
        player1:playerSprite:SetName("player")
        integer index = 0
        repeat until index = 3
            Interactable fillerInteractable
            npcList:Add(fillerInteractable)
            if index = 0
                npcList:Get(index):CreateInteractable("TestNPC", "clear", 11, 5.5, true)
                DialogueBehavior newDialogue1
                newDialogue1:AddDialogue("There is a chair infront of you.")
                newDialogue1:AddDialogue("It is TANGIBLE.")
                npcList:Get(index):SetInteractableBehavior(newDialogue1, "dialogue")
            elseif index = 1
                npcList:Get(index):CreateInteractable("TestNPC", "default", 5, 4, false)
                DialogueBehavior newDialogue1
                newDialogue1:AddDialogue("You cannot touch this black box (INTANGIBLE).")
                newDialogue1:AddDialogue("It shows interaction without physical collision.")
                newDialogue1:AddDialogue("It covers your sprite (due to being added later).")
                npcList:Get(index):SetInteractableBehavior(newDialogue1, "dialogue")
            elseif index = 2
                npcList:Get(index):CreateInteractable("TestTransition", "clear", 0, 4, false)
                npcList:Get(index):LoadFilledRectangle(32,32,color:White())
                MapTransitionBehavior newTransition1
                newTransition1:SetTransition(map1, CASTLE_MAP, npcList)
                newTransition1:SetCoordinates(16, 12)
                npcList:Get(index):SetInteractableBehavior(newTransition1, "transition")
            end
            Add(npcList:Get(index))
            AddKeyboardListener(npcList:Get(index))
            index = index + 1
        end
        /***********************************************************************
        End test Section
        ***********************************************************************/
    end

    action Update(number seconds)
        //Necessary for removing unneeded objects
        behaviorQueue:Update(seconds)
        repeat until removalQueue:IsEmpty()
            Remove(removalQueue:RemoveFromFront())
        end
       
        //for animation
        //elapsedTime = elapsedTime + seconds

        // Movement using WASD
        // Get current location
        newY = player1:playerSprite:GetY()
        newX = player1:playerSprite:GetX()

        // Add/Sub to both X and Y based on keys
        if monitor:IsKeyPressed(keys:W)
            newY = newY + plyrSpeed * seconds
            
            // for animation -- commented out for testing
            /*newY = testAnimation:girl:GetY() + plyrSpeed * seconds
            //for animation
            if elapsedTime >= 1/fps
                frame = frame + 1
            if frame > 3
                frame = 1 
            end
            testAnimation:ChangeFrame()
            elapsedTime = elapsedTime - 1/fps
            end*/
        end
        if monitor:IsKeyPressed(keys:S)
            newY = newY - plyrSpeed * seconds
        end
        if monitor:IsKeyPressed(keys:D)
            newX = newX + plyrSpeed * seconds
        end
        if monitor:IsKeyPressed(keys:A)
            newX = newX - plyrSpeed * seconds
        end

        // Checks if PLAYER is out of bounds
        if newY < 0
            newY = 0
        end
        if newX < 0
            newX = 0
        end
        if newY > map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
            newY = map1:testMap:GetHeight() - player1:playerSprite:GetHeight()
        end
        if newX > map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
            newX = map1:testMap:GetWidth() - player1:playerSprite:GetWidth()
        end
        
        player1:playerSprite:SetPosition(newX,newY)
//        testAnimation:girl:SetPosition(newX, newY)
    end

    action AddBehavior(Behavior behavior)
        behaviorQueue:AddBehavior(behavior)
    end

    action AddToRemove(Item2D item)
        removalQueue:Add(item)
    end

    action BeginCollision(CollisionEvent2D event)
        output "OW!"
        CheckForInteraction(event)
    end
	
    action FinishCollision(CollisionEvent2D event)
        CheckForInteraction(event)
    end

    // This action checks if the collision involes the player
    // and an Interactable Object.  If so, it toggles the
    // interactable such that presing [SPACE] should proceed
    // with the given dialoge.
    // * The checking is based on the NAME of the DRAWABLES
    //   > Interactable MUST inherit Drawable for type casting
    action CheckForInteraction(CollisionEvent2D event)
    /***********************************************************************
    Collision detection for Interactable Objects (NPCs, Objects, etc.)
    It is currently commented-out so that nothing breaks
                                                        - Ryan
    ***********************************************************************/
///*      MAIN INTERACTABLE ACITON - ALLOWS FOR INTERACTIONS W/ PLAYER
        // Variable used to determine if interaction is available
        boolean interaction = false

        // Cast collision items as Drawables to use them
        Drawable itemA = cast(Drawable, event:GetItemA())
        Drawable itemB = cast(Drawable, event:GetItemB())

        // Check if PLAYER & INTERACTABLE
        if itemA:GetName() = "player"
            if itemB:GetName() = "interactable"
                interaction = true
            end
        end

        // If interaction is available, enable/disable it
        if interaction
            Interactable newItemB = cast(Interactable, itemB)
            newItemB:ToggleInteraction()
        end
    /***********************************************************************
    End of Ryan's Testing Section
    ***********************************************************************/
    end

    action SetMap(Map newMap)
        map1 = newMap
    end

    action GetPlayer() returns Player
        return player1
    end
end
