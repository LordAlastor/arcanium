use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Interface.Item2D

class CombatDamageTargetBehavior is Behavior

    Game game
    Array<Item2D> removalArray
    BehaviorQueue behaviorQueue
    Battle battle
    CombatMainPageBehavior mainPage
    integer spellID = 0
    Combatant caster
    Array<Combatant> targets

    action Run(BehaviorEvent event)
        Spell spell
        spell:FillSpell(spellID)

        Player player = cast(Player, caster)

        if player:GetCurrentMP() >= spell:GetManaCost()
            player:SetCurrentMP(player:GetCurrentMP() - spell:GetManaCost())
    
            counter = 0

            repeat while counter < targets:GetSize()
                if targets:Get(counter) not= undefined
                    targets:Get(counter):ReceiveAttack(spell, caster)
                end

                counter = counter + 1
            end
        else
            Array<text> log
            log:Add(player:GetName() + " does not have enough mana to cast " + spell:GetName() + "!")

            DisplayLogBehavior updateMessage
            updateMessage:SetGame(game)
            updateMessage:SetLog(log)
            updateMessage:SetRemovalArray(removalArray)
            behaviorQueue:AddBehavior(updateMessage)
        end

        battle:UpdateStatus()
        battle:EnemyTurn()

        mainPage:SetFinished(true)
    end

    action SetGame(Game newGame)
        game = newGame
    end

    action SetRemovalArray(Array<Item2D> newArray)
        removalArray = newArray
    end

    action SetBehaviorQueue(BehaviorQueue newQueue)
        behaviorQueue = newQueue
    end

    action SetBattle(Battle newBattle)
        battle = newBattle
    end

    action SetMainPage(CombatMainPageBehavior behavior)
        mainPage = behavior
    end

    action SetSpellID(integer ID)
        spellID = ID
    end

    action SetCaster(Combatant attacker)
        caster = attacker
    end

    action SetTargets(Array<Combatant> defenders)
        targets = defenders
    end
end