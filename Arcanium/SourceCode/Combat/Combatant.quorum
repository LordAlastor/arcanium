use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Random

class Combatant

    text name = ""          //name to display
    integer currentHP = 1   //current health
    integer maxHP = 1       //maximum amount of health
    integer experienceValue = 1 //how much exp an enemy will give or how much the player currently has
    integer level = 1       //current level of the enemy/player
    number currentAttack = 1 //current multiplier for outgoing damage
    Array<number> currentElementsEffectiveness //current multiplier for incoming damage
    Array<Status> statuses  //statuses currently inflicted on this combatant

    /*When initialized the currentElementsEffectiveness array is given 
    6 undefined values, it also cannot grow larger or smaller*/
    on create
        currentElementsEffectiveness:SetSize(6)
        currentElementsEffectiveness:SetMaxSize(6)
        currentElementsEffectiveness:SetAutoResize(false)
    end

    /*Take an attack from potentially an enemy, ally, or theirself, determines
    if it heals or damages, and if damaging calculates and applies it along
    with its status effects*/
    action ReceiveAttack(Attack attack, Combatant user) returns Array<text>
        Array<text> log
        number damageModifier = 0
        integer damageRecieved = 0
        integer attackID = attack:GetID()
        
        //TODO place check below for spells that heal self/friendlies but damage enemies
        if (attack:GetCanHeal())
            return ReceiveHeal(attack, user)
        end

        if (attack is Physical)
            Physical physicalAttack = cast(Physical, attack)
            integer element = physicalAttack:GetElementalType()
            if(element not= 0)
                damageModifier = currentElementsEffectiveness:Get(element - 1)
            else
                damageModifier = 1
            end
        else
            damageModifier = CalculateDamageModifier(attackID)
        end

        damageRecieved = cast(integer, damageModifier
         * attack:GetBaseDamage() * user:GetCurrentAttack())

        text incomingAttack = ""
        if (attack is Spell)
            incomingAttack = user:GetName() + " cast "
             + attack:GetName() + " on " + GetName() + "!"
        else
            incomingAttack = user:GetName() + " used "
             + attack:GetName() + " on " + GetName() + "!"
        end
        log:Add(incomingAttack)

        text incomingDamage = GetName() + " took " + damageRecieved + " damage!"
        log:Add(incomingDamage)

        if CheckDefeated(damageRecieved)
            text defeated = GetName() + " was defeated!"
            log:Add(defeated)
        else
            Array<text> statusResults = ApplyAttackStatus(attack)
            Iterator<text> it = statusResults:GetIterator()
            repeat while (it:HasNext())
                log:Add(it:Next())
            end
        end

        return log
    end

    /*Takes a healing attack from an enemy, ally, or theirself, applies/removes
    status. Note: currently only goes off spell base damage*/
    action ReceiveHeal(Attack healMove, Combatant user) 
     returns Array<text>
        Array<text> log
        integer healReceived = healMove:GetBaseDamage()

        if (currentHP + healReceived > maxHP)
            healReceived = maxHP - currentHP
        end

        SetCurrentHP(currentHP + healReceived)

        text incomingMove = ""
        if (healMove is Spell)
            incomingMove = user:GetName() + " cast "
             + healMove:GetName() + " on " + GetName() + "!"
        else
            incomingMove = user:GetName() + " used "
             + healMove:GetName() + " on " + GetName() + "!"
        end
        log:Add(incomingMove)

        text incomingHeal = GetName() + " recieved " + healReceived + " health!"
        log:Add(incomingHeal)

        Array<text> statusResults = ApplyAttackStatus(healMove)
        Iterator<text> it = statusResults:GetIterator()
        repeat while (it:HasNext())
            log:Add(it:Next())
        end

        return log
    end

    /*Calculate what percentage of its base damage an attack will deal,
    does not consider the attack stat. Is not used for physical attacks*/
    action CalculateDamageModifier(integer elementID) returns number
        number damageModifier = 0
        integer tokens = 0
        integer counter = 5
        integer elementCount = 0

        //elementID order: 6/7/8/9 fire water earth air light dark
        repeat 6 times
            elementCount = elementID mod 10
            
            if (elementCount > 0)
                damageModifier = damageModifier + (cast(number, elementCount) 
                 * currentElementsEffectiveness:Get(counter))
                tokens = tokens + elementCount
            end

            elementID = elementID / 10
            counter = counter - 1
        end

        if (tokens not= 0)
            damageModifier = damageModifier / cast(number, tokens)
        else
            damageModifier = 1
        end

        return damageModifier
    end

    /*Apply/remove all status effects attached to a given attack*/
    action ApplyAttackStatus(Attack attack) returns Array<text>
        Array<text> statusChange
        text statusApplied = ""
        Iterator<Status> it = attack:GetAppliedStatuses():GetIterator()
        Status currentStatus
        repeat while it:HasNext()
            currentStatus = it:Next()
            if (ApplyStatus(currentStatus))
                statusApplied = GetName() + " was inflicted with the status "
                 + currentStatus:GetName()
            else
                statusApplied = GetName() + " resisted the status "
                 + currentStatus:GetName()
            end
            statusChange:Add(statusApplied)
        end

        it = attack:GetCuredStatuses():GetIterator()
        repeat while it:HasNext()
            currentStatus = it:Next()
            if (RemoveStatus(currentStatus:GetStatusID()))
                statusApplied = GetName() + " was cured of the status "
                 + currentStatus:GetName()
                statusChange:Add(statusApplied)
            end
        end

        return statusChange
    end
    /*Apply the basic results of a status being inflicted, also stacks effects 
    with others and checks if the application chance works in the first place.
    will return true if status succesfully applied, false if target resisted*/
    action ApplyStatus(Status newStatus) returns boolean
        Random randomSelection
        integer randomNumber = randomSelection:RandomIntegerBetween(1, 100)
        integer applyChance = cast(integer, newStatus:GetApplicationChance() * 100)

        if (randomNumber > applyChance)
            return false
        end
        //TODO status replacement with the same name
        if (newStatus:GetElementID() / 1000000 = 6)
            currentAttack = currentAttack * newStatus:GetBaseModifier()
        end

        integer i = 0
        number newElementEffectiveness = 0
        repeat while (i < 6)
            newElementEffectiveness = currentElementsEffectiveness:Get(i)
             * newStatus:GetEffectivenessStatModifiersAtPosition(i)
            currentElementsEffectiveness:Set(i, newElementEffectiveness)
            i = i + 1
        end

        newStatus:SetIsActive(true)
        statuses:Add(newStatus)

        return true
    end

    /*Go through the status array, if the status inflicts damage apply it,
    update the turn counter, if turn counter hits 0 remove the status effect
    and its stat changes*/
    action UpdateStatus()
        integer elementID = 0
        integer damageRecieved = 0

        integer i = 0
        Status currentStatus
        repeat while (i < statuses:GetSize())
            currentStatus = statuses:Get(i)
            elementID = currentStatus:GetElementID()

            if (elementID / 1000000 = 7)
                damageRecieved = cast(integer, CalculateDamageModifier(elementID) 
                 * currentStatus:GetBaseDamage())
                CheckDefeated(damageRecieved)
            end
            
            currentStatus:DecrementTurnCounter()
            if (currentStatus:GetTurnCounter() <= 0)
                if (elementID / 1000000 = 6)
                    currentAttack = currentAttack / currentStatus:GetBaseModifier()
                end

                integer j = 0
                number newElementEffectiveness = 0
                repeat while (j < 6)
                    newElementEffectiveness = currentElementsEffectiveness:Get(j)
                     / currentStatus:GetEffectivenessStatModifiersAtPosition(j) 
                    currentElementsEffectiveness:Set(j, newElementEffectiveness)
                    j = j + 1
                end

                currentStatus:SetIsActive(false)
                statuses:RemoveAt(i)
            else
                i = i + 1
            end
        end
    end

    /*Remove a specific status effect and its stat changes, return true if
    the status effect was found and removed, false otherwise*/
    action RemoveStatus(integer statusID) returns boolean
        Iterator<Status> it = statuses:GetIterator()
        Status currentStatus
        repeat while it:HasNext()
            currentStatus = it:Next()

            if (currentStatus:GetStatusID() = statusID)
                if (currentStatus:GetElementID() / 1000000 = 6)
                    currentAttack = currentAttack / currentStatus:GetBaseModifier()
                end

                integer i = 0
                number newElementEffectiveness = 0
                repeat while (i < 6)
                    newElementEffectiveness = currentElementsEffectiveness:Get(i)
                     / currentStatus:GetEffectivenessStatModifiersAtPosition(i) 
                    currentElementsEffectiveness:Set(i, newElementEffectiveness)
                    i = i + 1
                end
                statuses:Remove(currentStatus)
                return true
            end
        end

        return false
    end

    /*Remove all status effects and their stat changes*/
    action ClearAllStatus()
        Iterator<Status> it = statuses:GetIterator()
        Status currentStatus
        repeat while it:HasNext()
            currentStatus = it:Next()

            if (currentStatus:GetElementID() / 1000000 = 6)
                currentAttack = currentAttack / currentStatus:GetBaseModifier()
            end

            integer i = 0
            number newElementEffectiveness = 0
            repeat while (i < 6)
                newElementEffectiveness = currentElementsEffectiveness:Get(i)
                 / currentStatus:GetEffectivenessStatModifiersAtPosition(i) 
                currentElementsEffectiveness:Set(i, newElementEffectiveness)
                i = i + 1
            end
        end

        statuses:Empty()
    end

    /*Applies damage and checks if that defeats the target*/
    action CheckDefeated(integer damage) returns boolean
        if (GetCurrentHP() > damage)
            SetCurrentHP(GetCurrentHP() - damage)
            return false
        end

        SetCurrentHP(0)
        return true
    end

/*******************************************************************************
                    Getters and Setters Below This Point
*******************************************************************************/

    action SetName(text newName)
        name = newName
    end

    action GetName() returns text
        return name
    end

    action SetCurrentHP(integer newCurrentHP)
        currentHP = newCurrentHP
    end

    action GetCurrentHP() returns integer
        return currentHP
    end

    action SetMaxHP(integer newMaxHP)
        maxHP = newMaxHP
    end

    action GetMaxHP() returns integer
        return maxHP
    end

    action SetExperienceValue(integer newExperienceValue)
        experienceValue = newExperienceValue
    end

    action GetExperienceValue() returns integer
        return experienceValue
    end

    action SetLevel(integer newLevel)
        level = newLevel
    end

    action GetLevel() returns integer
        return level
    end

    action SetCurrentAttack(number newCurrentAttack)
        currentAttack = newCurrentAttack
    end

    action GetCurrentAttack() returns number
        return currentAttack
    end

    action SetCurrentElementsEffectivenessAtPosition(integer position, number newCurrentResistance)
        currentElementsEffectiveness:Set(position, newCurrentResistance)
    end

    action GetCurrentElementsEffectivenessAtPosition(integer position) returns number
        return currentElementsEffectiveness:Get(position)
    end
end