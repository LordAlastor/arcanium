use Libraries.Containers.Array

class Combatant

    text name = ""          //name to display
    integer currentHP = 1   //current health
    integer maxHP = 1       //maximum amount of health
    number attack = 1       //multiplier for damage dealt
    Array<number> elementsEffectiveness //fire, water, earth, air, light, dark

    on create
        repeat 6 times
            elementsEffectiveness:Add(1)
        end
    end
    
    action ReceiveHeal(Spell healSpell, Combatant caster) 
     returns Array<text>
        Array<text> log
        integer healAmount = healSpell:GetBaseDamage()

        if currentHP + healAmount > maxHP
            healAmount = maxHP - currentHP
        end
        SetCurrentHP(currentHP + healAmount)

        text incomingSpell = caster:GetName() + " cast " + healSpell:GetName() 
         + " on " + GetName() + "!"
        log:Add(incomingSpell)

        text incomingHeal = GetName() + " recieved " + healAmount + " health!"
        log:Add(incomingHeal)

        return log
    end

    action ReceiveSpellAttack(Spell enemySpell, Combatant caster) 
     returns Array<text>
        Array<text> log
        number damageModifier = 0
        number tokens = 0
        integer spellID = enemySpell:GetID()
        integer counter = 5
        integer elementCount = 0
        
        //TODO place check below for spells that heal self/friendlies but damage enemies
        if enemySpell:GetCanHeal()
            return ReceiveHeal(enemySpell, caster)
        end

        //SpellID order: 1 fire water earth air light dark
        repeat 6 times
            elementCount = spellID mod 10
            
            if (elementCount > 0)
                damageModifier = damageModifier + cast(number, elementCount) 
                 * GetElementsEffectiveness(counter)
                tokens = tokens + elementCount
            end

            spellID = spellID / 10
            counter = counter - 1
        end

        integer damage = cast(integer, damageModifier/tokens 
         * enemySpell:GetBaseDamage())
        
        //Adds text to display to player into the array
        //Results in log[incomingAttack, incomingDamage, defeated]

        text incomingSpell = caster:GetName() + " cast " + enemySpell:GetName() 
         + " on " + GetName() + "!"
        log:Add(incomingSpell)

        text incomingDamage = GetName() + " took " + damage + " damage!"
        log:Add(incomingDamage)

        if CheckDefeated(damage)
            text defeated = GetName() + " was defeated!"
            log:Add(defeated)
        end

        return log
    end

    action CheckDefeated(integer damage) returns boolean
        if GetCurrentHP() > damage
            SetCurrentHP(GetCurrentHP() - damage)
            return false
        end

        SetCurrentHP(0)
        return true
    end

    action SetName(text newName)
        name = newName
    end

    action GetName() returns text
        return name
    end

    action SetCurrentHP(integer newCurrentHP)
        currentHP = newCurrentHP
    end

    action GetCurrentHP() returns integer
        return currentHP
    end

    action SetMaxHP(integer newMaxHP)
        maxHP = newMaxHP
    end

    action GetMaxHP() returns integer
        return maxHP
    end

    action SetAttack(number newAttack)
        attack = newAttack
    end

    action GetAttack() returns number
        return attack
    end

    action SetElementsEffectiveness(integer position, number newResistance)
        elementsEffectiveness:Set(position, newResistance)
    end

    action GetElementsEffectiveness(integer position) returns number
        return elementsEffectiveness:Get(position)
    end
end